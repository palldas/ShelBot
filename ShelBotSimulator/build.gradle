/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn how to create Gradle builds at https://guides.gradle.org/creating-new-gradle-builds
 */
plugins{
    id "base"
    id 'java-library'
    id 'com.github.johnrengelman.shadow' version '5.2.0'
}

def ROBOT_MAIN_CLASS = "com.shelbot.ShelBot"

task zip(type: Zip, group: "Archive", description: "Archives sources in a zip file") {
    from "src"
    setArchiveName "ShelBot-demo1.0.zip"
}

repositories {
    // Since my Apache Commons dependency (defined below) exists in the Maven Central Repository, 
    // I need to define it as a repository for this project.
    mavenCentral()
    flatDir {
       dirs 'lib'
   }
    jcenter()
    maven { url "https://jitpack.io" }
}


dependencies {
    // In this case, I'm adding the Apache Commons library for demonstration purposes.
    // (This library isn't actually needed, but serves the purpose of demonstrating how
    // to add a custom library)
    compile group: 'net.compartmental.code', name: 'minim', version: '2.2.2'
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.0'
    compile group: 'org.processing', name: 'core', version: '2.2.1'
    compile group: 'org.processing', name: 'video', version: '3.3.7'
    compile group: 'javazoom', name: 'jlayer', version: '1.0.1'
    compile group: 'net.java.dev.jna', name: 'jna', version: '4.0.0'
    compile group: 'io.github.vveird', name: 'purejavahidapi', version: '0.0.3'
    compile 'com.github.WilliamAHartman:Jamepad:1.4.0'
    compile 'uk.co.electronstudio.sdl2gdx:sdl2gdx:1.0.4'
    compile group: 'de.dfki.mary', name: 'voice-cmu-slt-hsmm', version: '5.2'
    compile group: 'javax.persistence', name: 'persistence-api', version: '1.0'
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'
    compile (name:'JoyconLib-1.0', ext:'jar')
    compile (name:'ntcore-java', ext:'jar')
    compile (name:'ntcore-jni', ext:'jar')
    compile (name:'wpiutil', ext:'jar')
    compile (name:'tritonus-share-0.3.7-2', ext:'jar')


}

jar{
    from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    // I need to set my manifest up so the coprocessor knows where my main class is
    manifest {
        attributes 'Main-Class': ROBOT_MAIN_CLASS
    }
    from('src/main/resources') {
      include '*.png'
    }
    from('audio/simulator'){
        include '*.mp3'
        // into 'audio'
    }
}

javadoc {
    source = sourceSets.main.allJava
    classpath = configurations.compile
}

shadowJar {
    classifier = ''
    mergeServiceFiles()
}